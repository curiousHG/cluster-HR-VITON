Namespace(CElamda=10, D_lr=0.0002, Ddownx2=True, Ddropout=True, GANlambda=1, G_D_seperate=False, G_lr=0.0002, add_lasttv=False, batch_size=8, checkpoint_dir='checkpoints', clothmask_composition='warp_grad', data_list='data3/train2.txt', datamode='train', dataroot='./data/', display_count=100, edgeawaretv='no_edge', fine_height=256, fine_width=192, fp16=False, gpu_ids='0', interflowloss=True, keep_step=30000, lasttvonly=True, load_step=0, name='full_test2', no_GAN_loss=False, no_test_visualize=False, num_D=2, num_test_visualize=3, occlusion=True, out_layer='relu', output_nc=13, save_count=10000, semantic_nc=13, shuffle=False, spectral=False, tensorboard_count=5, tensorboard_dir='tensorboard', test_data_list='data3/test2.txt', test_dataroot='./data/', test_datasetting='unpaired', tocg_checkpoint='/home/mech/btech/me2190885/HR-VITON/checkpoints/mtviton.pth', tvlambda=2, upsample='bilinear', val_count=1000, warp_feature='T1', workers=4)
Start to train full_test2!
MultiscaleDiscriminator(
  (layer0): Sequential(
    (0): Conv2d(33, 64, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2))
    (1): LeakyReLU(negative_slope=0.2, inplace=True)
    (2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2))
    (3): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (4): LeakyReLU(negative_slope=0.2, inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2))
    (7): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (8): LeakyReLU(negative_slope=0.2, inplace=True)
    (9): Dropout(p=0.5, inplace=False)
    (10): Conv2d(256, 512, kernel_size=(4, 4), stride=(1, 1), padding=(2, 2))
    (11): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (12): LeakyReLU(negative_slope=0.2, inplace=True)
    (13): Conv2d(512, 1, kernel_size=(4, 4), stride=(1, 1), padding=(2, 2))
  )
  (layer1): Sequential(
    (0): Conv2d(33, 64, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2))
    (1): LeakyReLU(negative_slope=0.2, inplace=True)
    (2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2))
    (3): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (4): LeakyReLU(negative_slope=0.2, inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(2, 2))
    (7): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (8): LeakyReLU(negative_slope=0.2, inplace=True)
    (9): Dropout(p=0.5, inplace=False)
    (10): Conv2d(256, 512, kernel_size=(4, 4), stride=(1, 1), padding=(2, 2))
    (11): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (12): LeakyReLU(negative_slope=0.2, inplace=True)
    (13): Conv2d(512, 1, kernel_size=(4, 4), stride=(1, 1), padding=(2, 2))
  )
  (downsample): AvgPool2d(kernel_size=3, stride=2, padding=[1, 1])
)
